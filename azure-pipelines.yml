
trigger:
- master
- release/*

parameters:
  - name: VCPKG_COMMIT
    displayName: VCPKG commit
    type: string
    default: 2020.11-1
    values:
      - 2020.11-1
      - 2020.11
      - 2020.07
      - 2020.06
      - 2020.04
      - 2020.01
      - master
variables:
  VCPKG_REPOSITORY: https://github.com/Microsoft/vcpkg.git
  VCPKG_OVERLAY_PORTS_REPOSITORY: https://github.com/NordicPlayground/vcpkg-export-public

jobs:
  # Linux
  - job: Linux
    variables:
      wheel_platform: 'manylinux2010_x86_64'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: Docker@2
      displayName: 'Build ManyLinux wheel'
      inputs:
        containerRegistry: acr-nrfprivateeu
        command: run
        arguments: '--rm -e PLAT=$(wheel_platform) -v $(System.DefaultWorkingDirectory):/data nrfwayland.azurecr.io/nrf/projects-pc-ble-driver-py-linux:v6 /build/build-wheels.sh'
    - bash: |
        set -o errexit -o pipefail
        ls -R wheelhouse
        cp --verbose -R wheelhouse/*.whl "$(Build.ArtifactStagingDirectory)"
      displayName: 'Copy wheels'
    - task: GitHubRelease@0
      inputs:
        gitHubConnection: 'waylandCI'
        repositoryName: 'NordicSemiconductor/pc-ble-driver-py'
        action: 'edit'
        tagSource: 'manual'
        tag: '$(Build.SourceBranchName)'
        assetUploadMode: 'replace'
        isDraft: true
        addChangeLog: false
      condition: ne(variables['Build.Reason'], 'PullRequest')

  # macOS
  - job: macOS
    variables:
      VCPKG_ROOT: '$(Agent.HomeDirectory)/vcpkg'
      VCPKG_OVERLAY_PORTS: '$(Agent.HomeDirectory)/vcpkg-overlay-ports'
      python_arch: 'x64'
    strategy:
      matrix:
        py36:
          python_version: '3.6.8'
          python_bin: '3.6'
        py37:
          python_version: '3.7.5'
          python_bin: '3.7'
        py38:
          python_version: '3.8.0'
          python_bin: '3.8'
        py39:
          python_version: '3.9.0'
          python_bin: '3.9'
    pool:
      vmImage: 'macos-10.15'
    steps:
    - script: |
        set -o errexit -o pipefail
        ls /Applications
        sudo xcode-select -s /Applications/Xcode_11.7.app
      displayName: 'Install XCode'
    - script: |
        brew install swig gcc@9
      displayName: 'Install gcc and swig'
    - script: |
        set -o errexit -o pipefail
        git clone $(VCPKG_REPOSITORY) $(VCPKG_ROOT)
        git -C $(VCPKG_ROOT) checkout ${{ parameters.VCPKG_COMMIT }}
        git clone $(VCPKG_OVERLAY_PORTS_REPOSITORY) $(VCPKG_OVERLAY_PORTS)
        CC=gcc-9 CXX=g++-9 $(VCPKG_ROOT)/bootstrap-vcpkg.sh
      displayName: 'Install vcpkg'
    - script: |
        set -o errexit -o pipefail
        export PATH=$VCPKG_ROOT:$PATH
        export VCPKG_OSX_DEPLOYMENT_TARGET=10.9
        vcpkg install nrf-ble-driver:$(python_arch)-osx
      displayName: 'Install nrf-ble-driver'
      env: {
        VCPKG_OVERLAY_PORTS: "$(VCPKG_OVERLAY_PORTS)"
      }        
    - bash: |
        set -o errexit -o pipefail
        wget https://www.python.org/ftp/python/$(python_version)/python-$(python_version)-macosx10.9.pkg
        sudo installer -pkg python-$(python_version)-macosx10.9.pkg -target /
      displayName: 'Install all pythons'
    - bash: |
        set -o errexit -o pipefail
        rm -rf _skbuild
        pypath=`which python$(python_bin)`
        ${pypath} -m pip install -r requirements-dev.txt
        ${pypath} setup.py bdist_wheel --build-type Release -- -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9
      displayName: 'Build for python$(python_bin)'
    - bash: |
        cp -R dist/*.whl "$(Build.ArtifactStagingDirectory)"
      displayName: 'Copy artifacts'
    - task: GitHubRelease@0
      inputs:
        gitHubConnection: 'waylandCI'
        repositoryName: 'NordicSemiconductor/pc-ble-driver-py'
        action: 'edit'
        tagSource: 'manual'
        tag: '$(Build.SourceBranchName)'
        assetUploadMode: 'replace'
        isDraft: true
        addChangeLog: false
      condition: ne(variables['Build.Reason'], 'PullRequest')

  # Windows
  - job: Windows
    variables:
      VCPKG_ROOT: '$(Agent.HomeDirectory)\vcpkg'
      VCPKG_OVERLAY_PORTS: '$(Agent.HomeDirectory)\vcpkg-overlay-ports'
    strategy:
      matrix:
        py36_win64:
          python_version: '3.6'
          python_lib: '36'
          python_arch: 'x64'
          generator: 'Visual Studio 15 2017 Win64'
        py36_win32:
          python_version: '3.6'
          python_lib: '36'
          python_arch: 'x86'
          generator: 'Visual Studio 15 2017'
        py37_win64:
          python_version: '3.7'
          python_lib: '37'
          python_arch: 'x64'
          generator: 'Visual Studio 15 2017 Win64'
        py37_win32:
          python_version: '3.7'
          python_lib: '37'
          python_arch: 'x86'
          generator: 'Visual Studio 15 2017'
        py38_win64:
          python_version: '3.8'
          python_lib: '38'
          python_arch: 'x64'
          generator: 'Visual Studio 15 2017 Win64'
        py38_win32:
          python_version: '3.8'
          python_lib: '38'
          python_arch: 'x86'
          generator: 'Visual Studio 15 2017'
        py39_win32:
          python_version: '3.9'
          python_lib: '39'
          python_arch: 'x86'
          generator: 'Visual Studio 15 2017'
        py39_win64:
          python_version: '3.9'
          python_lib: '39'
          python_arch: 'x64'
          generator: 'Visual Studio 15 2017 Win64'
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - script: |
        choco install -y --x86 swig
      displayName: 'Install toolchain on Windows'
    - script: |
        git clone $(VCPKG_REPOSITORY) $(VCPKG_ROOT)
        git -C $(VCPKG_ROOT) checkout ${{ parameters.VCPKG_COMMIT }}
        git clone $(VCPKG_OVERLAY_PORTS_REPOSITORY) $(VCPKG_OVERLAY_PORTS)
        $(VCPKG_ROOT)\bootstrap-vcpkg.bat
      displayName: 'Install vcpkg'
    - script: |
        set PATH=$(VCPKG_ROOT);%PATH%
        vcpkg install nrf-ble-driver:$(python_arch)-windows
      displayName: 'Install nrf-ble-driver'
      env: {
        VCPKG_OVERLAY_PORTS: "$(VCPKG_OVERLAY_PORTS)"
      }        
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python_version)'
        architecture: '$(python_arch)'
    - bash: |
        set -o errexit -o pipefail
        rm -rf _skbuild
        pypath=`which python`
        pyroot=`dirname ${pypath}`
        pyheader=`ls ${pyroot}/include/Python.h`
        pyincldir=`dirname ${pyheader}`
        pylib=`ls ${pyroot}/libs/python$(python_lib).lib`
        pip install -r requirements-dev.txt
        python setup.py bdist_wheel --build-type Release -- -DPYTHON_INCLUDE_DIR=${pyincldir} -DPYTHON_LIBRARY=${pylib} -G "$(generator)"
      displayName: 'Build for python $(python_version)'
    - bash: |
        for f in dist/*; do mv "${f}" "${f/cp38m/cp38}"; done;
        cp -R dist/*.whl "$(Build.ArtifactStagingDirectory)"
      displayName: 'Copy artifacts'
    - task: GitHubRelease@0
      inputs:
        gitHubConnection: 'waylandCI'
        repositoryName: 'NordicSemiconductor/pc-ble-driver-py'
        action: 'edit'
        tagSource: 'manual'
        tag: '$(Build.SourceBranchName)'
        assetUploadMode: 'replace'
        isDraft: true
        addChangeLog: false
      condition: ne(variables['Build.Reason'], 'PullRequest')

  - job: TriggerTest
    dependsOn: [
      Windows,
      Linux,
      macOS,
    ]
    strategy:
      matrix:
        linux:
          osType: 'linux'
        mac:
          osType: 'mac'
        win64:
          osType: 'win64'
        win32:
          osType: 'win32'
    pool: server
    steps:
    - task: InvokeRESTAPI@1
      displayName: 'Trigger test (check test result on Jenkins)'
      inputs:
        connectionType: 'connectedServiceName'
        serviceConnection: 'waylandJenkins'
        method: 'POST'
        urlSuffix: 'view/pc-ble-driver-py/job/pc-ble-driver-py-$(osType)/buildWithParameters?BRANCH=$(Build.SourceBranch)&VSTS_URL=$(system.CollectionUri)&TOKEN=$(system.AccessToken)&PROJECT_ID=$(system.teamProjectId)&HUB_NAME=$(system.hostType)&PLAN_ID=$(system.planId)&TASK_ID=$(system.taskInstanceId)&JOB_ID=$(system.jobId)'
        waitForCompletion: 'false'
      condition: ne(variables['Build.Reason'], 'PullRequest')
