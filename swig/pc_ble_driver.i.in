/*
 * Copyright (c) 2016-2019 Nordic Semiconductor ASA
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 *   3. Neither the name of Nordic Semiconductor ASA nor the names of other
 *   contributors to this software may be used to endorse or promote products
 *   derived from this software without specific prior written permission.
 *
 *   4. This software must only be used in or with a processor manufactured by Nordic
 *   Semiconductor ASA, or in or with a processor manufactured by a third party that
 *   is used in combination with a processor manufactured by Nordic Semiconductor.
 *
 *   5. Any software provided in binary or object form under this license must not be
 *   reverse engineered, decompiled, modified and/or disassembled.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

%module @SWIG_MODULE_NAME@

#ifdef _MSC_VER
    #if _MSC_VER == 1500 // 1500 == VC+ 9.0
        #include "stdint.h"
    #endif
#endif

%include "stdint.i"
%include "carrays.i"
%include "cpointer.i"

// Includes used in this transformation
%{
#include "sd_rpc.h"

#include <cstdio>
#include <mutex>
#include <map>
#include <memory>
%}

// Requires special handling
%ignore sd_rpc_open;
%ignore sd_rpc_close;

// Ignore L2CAP APIs that will be replaced by L2CAP CoCs
%ignore sd_ble_l2cap_cid_register;
%ignore sd_ble_l2cap_cid_unregister;
%ignore sd_ble_l2cap_tx;
%ignore sd_ble_l2cap_ch_setup;
%ignore sd_ble_l2cap_ch_release;
%ignore sd_ble_l2cap_ch_rx;
%ignore sd_ble_l2cap_ch_tx;
%ignore sd_ble_l2cap_ch_flow_control;
// Ignore event getter, handled by the connectivity device
%ignore sd_ble_evt_get;

// Grab the definitions
%include "platform.h"
%define SVCALL(number, return_type, signature) return_type signature
%enddef
%include "adapter.h"
%include "ble.h"
%include "ble_err.h"
%include "ble_gap.h"
%include "ble_gatt.h"
%include "ble_gatts.h"
%include "ble_gattc.h"
%include "ble_hci.h"
%include "ble_l2cap.h"
%include "ble_ranges.h"
%include "ble_types.h"
%include "nrf_error.h"
%include "sd_rpc.h"
%include "sd_rpc_types.h"

%pointer_functions(uint8_t, uint8);
%pointer_functions(int8_t, int8);
%pointer_functions(uint16_t, uint16);
%pointer_functions(uint32_t, uint32);

%array_class(char, char_array);
%array_class(uint8_t, uint8_array);
%array_class(uint16_t, uint16_array);
%array_class(ble_gattc_service_t, ble_gattc_service_array);
%array_class(ble_gattc_include_t, ble_gattc_include_array);
%array_class(ble_gattc_char_t, ble_gattc_char_array);
%array_class(ble_gattc_desc_t, ble_gattc_desc_array);
#if NRF_SD_BLE_API_VERSION == 2
%array_class(ble_gattc_attr_info_t, ble_gattc_attr_info_array);
#endif
#if NRF_SD_BLE_API_VERSION >= 3
%array_class(ble_gattc_attr_info16_t, ble_gattc_attr_info16_array);
%array_class(ble_gattc_attr_info128_t, ble_gattc_attr_info128_array);
#endif
%array_class(ble_gattc_handle_value_t, ble_gattc_handle_value_array);
%array_class(sd_rpc_serial_port_desc_t, sd_rpc_serial_port_desc_array);
#if NRF_SD_BLE_API_VERSION >= 5
%pointer_functions(ble_gap_data_length_limitation_t, ble_gap_data_length_limitation);
#endif

// Grab a Python function object as a Python object.
%typemap(in) PyObject *pyfunc {
    if (!PyCallable_Check($input)) {
        PyErr_SetString(PyExc_TypeError, "Need a callable object!");
        return nullptr;
    }
    $1 = $input;
}

%rename(sd_rpc_open) sd_rpc_open_py;
extern PyObject* sd_rpc_open_py(PyObject *adapter, PyObject *py_status_handler, PyObject *py_evt_handler, PyObject *py_log_handler);

%rename(sd_rpc_close) sd_rpc_close_py;
extern PyObject* sd_rpc_close_py(PyObject *adapter);

// adapter_context related
%{
#define MAX_ADAPTERS 10

typedef struct
{
    void *adapter_internal_ptr;
    PyObject *log_callback;
    PyObject *status_callback;
    PyObject *event_callback;
    std::mutex callback_mutex;
} adapter_context_t;

static std::map<void*, std::shared_ptr<adapter_context_t>> adapter_contexts{};

std::shared_ptr<adapter_context_t> adapter_context_add(adapter_t *adapter_ptr)
{
    if (adapter_contexts.find(adapter_ptr->internal) != adapter_contexts.end())
    {
#ifdef DEBUG
        printf("adapter_context_t already exists for %p:%p\n",
            adapter_ptr,
            adapter_ptr->internal
        );
#endif
            return nullptr;
    }

    auto new_context = std::make_shared<adapter_context_t>();
    new_context->adapter_internal_ptr = adapter_ptr->internal;
    adapter_contexts[adapter_ptr->internal] = new_context;
    return new_context;
}

bool adapter_context_remove(adapter_t *adapter_ptr)
{
    return adapter_contexts.erase(adapter_ptr->internal) == 1;
}

std::shared_ptr<adapter_context_t> adapter_context_find(adapter_t *adapter_ptr)
{
#ifdef DEBUG
    printf("adapter_context_find: searching for adapter_ptr: %p:%p\n",
        adapter_ptr,
        adapter_ptr->internal);
#endif

    auto context = adapter_contexts.find(adapter_ptr->internal);

    if (context != adapter_contexts.end())
    {
        return context->second;
    }

#ifdef DEBUG
    printf("adapter_context_find: no context found\n");
#endif

    return nullptr;
}
%}


%{


#include <mutex>
#include <string>


    class GILStateWrapper{
        // Ensure the python GIL is a state such that SWIG functions can be called within a scope
        private:
            PyGILState_STATE gstate;
            std::string lock_action_debug_message;
            std::lock_guard<std::recursive_mutex> lock; 
            static std::recursive_mutex GIL_MUTEX; 
        public: 
            GILStateWrapper(const char* _unused_debug_message) : lock_action_debug_message(_unused_debug_message), lock(GILStateWrapper::GIL_MUTEX) {
                this->gstate = PyGILState_Ensure();
            }
            GILStateWrapper(): GILStateWrapper("") {
            }    
            ~GILStateWrapper(){
                PyGILState_Release(this->gstate);
            }
    };

    std::recursive_mutex GILStateWrapper::GIL_MUTEX;

%}

/* Event callback handling */
%{
static void PythonEvtCallBack(adapter_t *adapter, ble_evt_t *ble_event)
{
    PyObject *func;
    PyObject *arglist;
    PyObject *adapter_obj;
    PyObject *ble_evt_obj;
    ble_evt_t* copied_ble_event;
    PyObject *result;

    //TODO Fix the deprecation waringngs on 3.9
    auto adapter_context = adapter_context_find(adapter);

    if (!adapter_context)
    {
#ifdef DEBUG
        printf("event_callback: No adapter context found for adapter %p\n", adapter);
#endif
        return;
    }

    if(adapter_context->event_callback == nullptr) {
#ifdef DEBUG
        printf("event_callback not set in adapter_context for adapter %p, returning\n", adapter);
#endif
        return;
    }

    std::lock_guard<std::mutex> lck(adapter_context->callback_mutex);

    func = adapter_context->event_callback;

#ifdef DEBUG
    printf("sizeof(ble_evt_t): %zd\n", sizeof(ble_evt_t));
    printf("ble_event->header.evt_len: %d\n", ble_event->header.evt_len);
    printf("ble_event->header.evt_id: %X\n", ble_event->header.evt_id);
    printf("sizeof(ble_evt_hdr_t): %zd\n", sizeof(ble_evt_hdr_t));
#endif // DEBUG

    // Do a copy of the event so that the Python developer is able to access the event after
    // this callback is complete. The event that is received in this function is allocated
    // on the stack of the function calling this function.

#if NRF_SD_BLE_API_VERSION == 2
    copied_ble_event = (ble_evt_t*)malloc(sizeof(ble_evt_t));
    memcpy(copied_ble_event, ble_event, sizeof(ble_evt_t));
#else
    // TODO: remove length_correction when NCP-2831 (encoder evt_len issue) has been fixed
    uint16_t length_correction = 10;
    copied_ble_event = (ble_evt_t*)malloc(ble_event->header.evt_len + length_correction);
    memcpy(copied_ble_event, ble_event, ble_event->header.evt_len + length_correction);
#endif


    GILStateWrapper GIL_lock("PythonEvtCallback"); 


    adapter_obj = SWIG_NewPointerObj(SWIG_as_voidptr(adapter), SWIGTYPE_p_adapter_t, 0 |  0 );
    // Create a Python object that points to the copied event, let the interpreter take care of
    // memory management of the copied event by setting the SWIG_POINTER_OWN flag.
    ble_evt_obj = SWIG_NewPointerObj(SWIG_as_voidptr(copied_ble_event), SWIGTYPE_p_ble_evt_t, SWIG_POINTER_OWN);
    arglist = Py_BuildValue("(OO)", adapter_obj, ble_evt_obj);

    result = PyObject_Call(func, arglist, NULL);

    Py_XDECREF(result);
    Py_XDECREF(adapter_obj);
    Py_XDECREF(ble_evt_obj);
    Py_DECREF(arglist);


}
%}

/* Status callback handling */
%{

static void PythonStatusCallBack(adapter_t *adapter, sd_rpc_app_status_t status_code, const char * status_message)
{
    PyObject *func;
    PyObject *arglist;
    PyObject *adapter_obj;
    PyObject *status_code_obj;
    PyObject *status_message_obj;
    PyObject *result;

    auto adapter_context = adapter_context_find(adapter);

    if (!adapter_context)
    {
#ifdef DEBUG
        printf("status_callback: No adapter context found for adapter %p\n", adapter);
#endif
        return;
    }

    func = adapter_context->status_callback;

    if(adapter_context->status_callback == nullptr) {
#ifdef DEBUG
        printf("status_callback not set in adapter_context for adapter %p, returning\n", adapter);
#endif
        return;
    }

    std::lock_guard<std::mutex> lck(adapter_context->callback_mutex);

    // For information regarding GIL and copying of data, please look at
    // function PythonEvtCallBack.

    GILStateWrapper GIL_lock("PythonStatusCallBack"); 

    adapter_obj = SWIG_NewPointerObj(SWIG_as_voidptr(adapter), SWIGTYPE_p_adapter_t, 0 |  0 );
    status_code_obj = SWIG_From_int((int)(status_code));

    // SWIG_Python_str_FromChar boils down to PyString_FromString which does a copy of log_message string
    status_message_obj = SWIG_Python_str_FromChar((const char *)status_message);
    arglist = Py_BuildValue("(OOO)", adapter_obj, status_code_obj, status_message_obj);

    result = PyObject_Call(func, arglist, NULL);

    Py_XDECREF(result);
    Py_XDECREF(adapter_obj);
    Py_XDECREF(status_code_obj);
    Py_XDECREF(status_message_obj);
    Py_DECREF(arglist);


}
%}

/* Log callback handling */
%{
static void PythonLogCallBack(adapter_t *adapter, sd_rpc_log_severity_t severity, const char * log_message)
{
    PyObject *func;
    PyObject *arglist;
    PyObject *adapter_obj;
    PyObject *severity_obj;
    PyObject *message_obj;
    PyObject *result;

    auto adapter_context = adapter_context_find(adapter);

    if (!adapter_context)
    {
#ifdef DEBUG
        printf("log_callback: No adapter context found for adapter %p\n", adapter);
#endif
        return;
    }

    if(adapter_context->log_callback == nullptr) {
#ifdef DEBUG
        printf("log_callback not set in adapter_context for adapter %p, returning\n", adapter);
#endif
        return;
    }

    std::lock_guard<std::mutex> lck(adapter_context->callback_mutex);

    func = adapter_context->log_callback;

    // For information regarding GIL and copying of data, please look at
    // function PythonEvtCallBack.

    GILStateWrapper GIL_lock("PythonLogCallBack"); 

    adapter_obj = SWIG_NewPointerObj(SWIG_as_voidptr(adapter), SWIGTYPE_p_adapter_t, 0 |  0 );
    severity_obj = SWIG_From_int((int)(severity));

    // SWIG_Python_str_FromChar boils down to PyString_FromString which does a copy of log_message string
    message_obj = SWIG_Python_str_FromChar((const char *)log_message);
    arglist = Py_BuildValue("(OOO)", adapter_obj, severity_obj, message_obj);

    result = PyObject_Call(func, arglist, NULL);

    Py_XDECREF(result);
    Py_XDECREF(adapter_obj);
    Py_XDECREF(message_obj);
    Py_XDECREF(severity_obj);
    Py_DECREF(arglist);

;
}
%}

%{
// Open the RPC and set Python function objects as a callback functions
PyObject* sd_rpc_open_py(PyObject *adapter, PyObject *py_status_handler, PyObject *py_evt_handler, PyObject *py_log_handler)
{

    PyObject *resultobj = 0;
    adapter_t *arg1 = (adapter_t *) 0;
    void *argp1 = 0 ;
    int res1 = 0 ;
    uint32_t result;
    std::shared_ptr<adapter_context_t> ctx{nullptr};


    {
        GILStateWrapper GIL_lock("sd_rpc_open_py"); 


        res1 = SWIG_ConvertPtr(adapter, &argp1,SWIGTYPE_p_adapter_t, 0 |  0 );
        if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sd_rpc_open" "', argument " "1"" of type '" "adapter_t *""'");
        }

        arg1 = (adapter_t * ) (argp1);

        // Try to register adapter_context_t
        ctx = adapter_context_add(arg1);
        if (!ctx)
        {
            SWIG_exception_fail(SWIG_ValueError, "Not able to register adapter_context_t for adapter");
        }

    }
        Py_XINCREF(py_log_handler);
        Py_XINCREF(py_status_handler);
        Py_XINCREF(py_evt_handler);

        ctx->log_callback = py_log_handler;
        ctx->status_callback = py_status_handler;
        ctx->event_callback = py_evt_handler;

    result = sd_rpc_open(arg1, PythonStatusCallBack, PythonEvtCallBack, PythonLogCallBack);
    {
       GILStateWrapper GIL_lock("sd_rpc_open_py_2"); 
       resultobj = SWIG_From_unsigned_SS_int((unsigned int) (result));
    }
    return resultobj;

fail:
    return nullptr;
}

PyObject *sd_rpc_close_py(PyObject *adapter) {
    PyObject *resultobj = 0;
    adapter_t *arg1 = (adapter_t *)0;
    void *argp1 = 0;
    int res1 = 0;
    uint32_t result;
    std::shared_ptr<adapter_context_t> ctx{nullptr};




    {
        GILStateWrapper GIL_lock("sd_rpc_close_py_1"); 
        res1 = SWIG_ConvertPtr(adapter, &argp1, SWIGTYPE_p_adapter_t, 0 |  0 );
        if (!SWIG_IsOK(res1)) {
            SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sd_rpc_close" "', argument " "1"" of type '" "adapter_t *""'");
        }

    }
        arg1 = (adapter_t *)(argp1);
        result = sd_rpc_close(arg1);

        ctx = adapter_context_find(arg1);

    if(!ctx)
    {
        SWIG_exception_fail(SWIG_ValueError, "Not able to find adapter_context_t for adapter");
    }
    else
    {
        // Make sure that callbacks are not running before decrementing the callback reference count
        {
            std::lock_guard<std::mutex> lck(ctx->callback_mutex);
            
            GILStateWrapper GIL_lock("sd_rpc_close_py_2"); 

            Py_XDECREF(ctx->event_callback);
            Py_XDECREF(ctx->status_callback);
            Py_XDECREF(ctx->log_callback);

            adapter_context_remove(arg1);



            resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result));
        }
        return resultobj;
    }

fail:
    return nullptr;
}

%}
